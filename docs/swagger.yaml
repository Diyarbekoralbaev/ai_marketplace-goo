basePath: /
definitions:
  models.LoginUser:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.SetVideoTask:
    properties:
      image_id:
        type: integer
      video_id:
        type: integer
    type: object
  models.SwaggerAiModel:
    properties:
      created_at:
        type: string
      description:
        type: string
      name:
        type: string
      owner:
        type: string
      price:
        type: number
      updated_at:
        type: string
    type: object
  models.SwaggerContact:
    properties:
      email:
        type: string
      id:
        type: integer
      message:
        type: string
      subject:
        type: string
    type: object
  models.SwaggerUser:
    properties:
      balance:
        type: number
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.TaskResult:
    properties:
      task_id:
        type: integer
    type: object
host: marketplace.araltech.tech
info:
  contact: {}
  description: This is a sample server Go Gin Auth server.
  title: Go Gin Auth API
  version: "1.0"
paths:
  /ai_models:
    get:
      description: Get all AI models
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwaggerAiModel'
            type: array
      summary: Get all AI models
      tags:
      - ai_models
    post:
      description: Create AI model
      parameters:
      - description: AI model object
        in: body
        name: aiModel
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerAiModel'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerAiModel'
      summary: Create AI model
      tags:
      - ai_models
  /ai_models/{id}:
    delete:
      description: Delete AI model
      parameters:
      - description: AI model ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: AI model deleted successfully
          schema:
            type: string
      summary: Delete AI model
      tags:
      - ai_models
    get:
      description: Get AI model
      parameters:
      - description: AI model ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerAiModel'
      summary: Get AI model
      tags:
      - ai_models
    put:
      description: Update AI model
      parameters:
      - description: AI model ID
        in: path
        name: id
        required: true
        type: integer
      - description: AI model object
        in: body
        name: aiModel
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerAiModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerAiModel'
      summary: Update AI model
      tags:
      - ai_models
  /ai_models/use:
    post:
      description: Use AI model
      parameters:
      - description: Text to analyze
        in: formData
        name: text
        required: true
        type: string
      - description: Image to analyze
        in: formData
        name: image
        type: file
      produces:
      - multipart/form-data
      responses:
        "200":
          description: Content generated successfully
          schema:
            type: string
      summary: Use AI model
      tags:
      - use_model
  /contact:
    get:
      description: Get all messages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SwaggerContact'
            type: array
      summary: Get all messages
      tags:
      - contact
    post:
      description: Contact
      parameters:
      - description: Contact object
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/models.SwaggerContact'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SwaggerContact'
      summary: Contact
      tags:
      - contact
  /contact/{id}:
    get:
      description: Get message
      parameters:
      - description: Message ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SwaggerContact'
      summary: Get message
      tags:
      - contact
  /get_task_result:
    post:
      consumes:
      - application/json
      description: Get the result of a task from the server
      parameters:
      - description: Task data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.TaskResult'
      produces:
      - application/json
      responses:
        "200":
          description: Task result
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get the result of a task
      tags:
      - viggle
  /login:
    post:
      description: Login
      parameters:
      - description: User object
        in: body
        name: user
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
      summary: Login
      tags:
      - users
  /register:
    post:
      description: Register a new user
      parameters:
      - description: User object
        in: body
        name: user
        schema:
          $ref: '#/definitions/models.SwaggerUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            type: string
      summary: Register a new user
      tags:
      - users
  /set_video_task:
    post:
      consumes:
      - application/json
      description: Set a video processing task for the server
      parameters:
      - description: Task data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.SetVideoTask'
      produces:
      - application/json
      responses:
        "200":
          description: Task set successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Set a video processing task
      tags:
      - viggle
  /upload_image:
    post:
      description: Upload an image to the server
      parameters:
      - description: Image file
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Image uploaded successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Upload an image
      tags:
      - viggle
  /upload_video:
    post:
      description: Upload a video to the server
      parameters:
      - description: Video file
        in: formData
        name: video
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Video uploaded successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Upload a video
      tags:
      - viggle
swagger: "2.0"
